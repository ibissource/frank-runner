<project default="restart" xmlns:if="ant:if" xmlns:unless="ant:unless">

	<target name="init">
		<basename property="basedir.basename" file="${basedir}"/>
		<property file="build.properties"/>

		<property name="project.dir" value="${main.project}" if:set="sub.project"/>
		<property name="configurations.names" value="${main.project},${sub.project}" if:set="sub.project"/>

		<property name="projects.dir" value="${basedir}/.."/>
		<property name="project.dir" value="${basedir.basename}/examples/Frank2Example1"/>
		<property file="${projects.dir}/${project.dir}/frank-runner.properties"/>

		<available property="war.pom.xml.available" file="${projects.dir}/${project.dir}/war/pom.xml"/>
		<available property="pom.xml.available" file="${projects.dir}/${project.dir}/pom.xml"/>

		<property name="classes.dir" value="war/src/main/resources" if:set="war.pom.xml.available"/>
		<property name="configurations.dir" value="war/src/main/configurations" if:set="war.pom.xml.available"/>
		<property name="java.dir" value="war/src/main/java" if:set="war.pom.xml.available"/>
		<property name="tests.dir" value="war/src/test/testtool" if:set="war.pom.xml.available"/>
		<property name="context.xml" value="war/src/main/webapp/META-INF/context.xml" if:set="war.pom.xml.available"/>
		<property name="maven.exec.dir" value="${projects.dir}/${project.dir}/war" if:set="war.pom.xml.available"/>

		<property name="classes.dir" value="src/main/resources" if:set="pom.xml.available"/>
		<property name="configurations.dir" value="src/main/configurations" if:set="pom.xml.available"/>
		<property name="java.dir" value="src/main/java" if:set="pom.xml.available"/>
		<property name="tests.dir" value="src/test/testtool" if:set="pom.xml.available"/>
		<property name="context.xml" value="src/main/webapp/META-INF/context.xml" if:set="pom.xml.available"/>
		<property name="maven.exec.dir" value="${projects.dir}/${project.dir}" if:set="pom.xml.available"/>

		<property name="classes.dir" value="classes"/>
		<property name="configurations.dir" value="configurations"/>
		<property name="java.dir" value="java"/>
		<property name="tests.dir" value="tests"/>
		<property name="context.xml" value="context.xml"/>

		<property name="maven" value="false"/><!-- feature toggle for now -->
		<property name="maven" value="true" if:set="war.pom.xml.available"/>
		<property name="maven" value="true" if:set="pom.xml.available"/>
		<property name="maven.clean" value="true" if:true="${maven}"/>
		<property name="maven.phase" value="compile" if:true="${maven}"/>
		<property name="maven.skip.tests" value="false" if:true="${maven}"/>
		<property name="maven.skip.javadoc" value="false" if:true="${maven}"/>
		<property name="maven.verbose" value="false" if:true="${maven}"/>

		<property name="classloader.type" value="DirectoryClassLoader"/>
		<property name="lib.server.dir" value="lib/server"/>
		<property name="lib.webapp.dir" value="lib/webapp"/>
		<property name="database.type" value="h2"/>
		<property name="dtap.stage" value="LOC"/>
		<property file="${projects.dir}/${project.dir}/${classes.dir}/DeploymentSpecifics.properties" prefix="ds.properties."/>
		<property name="instance.name" value="${ds.properties.instance.name}" if:set="ds.properties.instance.name"/>
		<basename property="instance.name" file="${project.dir}"/>
		<available property="configuration.name.default" value="${instance.name}" file="${projects.dir}/${project.dir}/${classes.dir}/Configuration.xml"/>
		<property name="ibistesttool.directory" value="${projects.dir}/${project.dir}/${tests.dir}"/>
		<property name="context.path" value="ROOT"/>
		<property name="maxmemory" value="1024M"/>

		<property name="update.strategy" value="latest" unless:true="${maven}"/>
		<condition property="update.strategy.is.latest"><equals arg1="${update.strategy}" arg2="latest"/></condition>
		<tstamp><format property="get.metadata.tstamp" pattern="yyyyMMdd-HH"/></tstamp>
		<condition property="get.metadata"><and><isset property="update.strategy.is.latest"/><not><resourceexists><file file="download/metadata/maven-metadata-${get.metadata.tstamp}.txt"/></resourceexists></not><not><isset property="ff.version"/></not></and></condition>
		<property name="get.metadata.maxtime" value="10"/>
		<property name="get.metadata.ignoreerrors" value="true"/>
		<mkdir dir="download/metadata"/>
		<get src="https://nexus.ibissource.org/service/local/repo_groups/public/content/org/ibissource/ibis-adapterframework-webapp/maven-metadata.xml" dest="download/metadata/maven-metadata-tmp.xml" maxtime="${get.metadata.maxtime}" ignoreerrors="${get.metadata.ignoreerrors}" verbose="on" if:set="get.metadata"/>
		<move file="download/metadata/maven-metadata-tmp.xml" tofile="download/metadata/maven-metadata.xml" failonerror="false" quiet="true"/>
		<xmlproperty file="download/metadata/maven-metadata.xml" if:set="update.strategy.is.latest"/>
		<echo file="download/metadata/maven-metadata-${get.metadata.tstamp}.txt" if:set="get.metadata">metadata.versioning.latest=${metadata.versioning.latest}</echo>
		<property name="ff.version" value="${metadata.versioning.latest}" if:set="metadata.versioning.latest"/>

		<property name="jdk.version" value="8"/>
		<property name="jdk.version.u" value="252"/>
		<property name="jdk.version.b" value="09"/>
		<property name="jdk.zip" value="OpenJDK${jdk.version}U-jdk_x64_windows_${jdk.version}u${jdk.version.u}b${jdk.version.b}.zip"/>
		<property name="jdk.url" value="https://github.com/AdoptOpenJDK/openjdk${jdk.version}-upstream-binaries/releases/download/jdk${jdk.version}u${jdk.version.u}-b${jdk.version.b}/${jdk.zip}"/>
		<property name="jdk.dir" value="build/openjdk-${jdk.version}u${jdk.version.u}-b${jdk.version.b}"/>
		<property name="ant.version." value="1.10.8"/><!-- extra . because ant.version is a build-in property -->
		<property name="ant.zip" value="apache-ant-${ant.version.}-bin.zip"/>
		<property name="ant.url" value="https://archive.apache.org/dist/ant/binaries/${ant.zip}"/>
		<property name="ant.dir" value="build/apache-ant-${ant.version.}"/>
		<property name="maven.version" value="3.6.3"/>
		<property name="maven.zip" value="apache-maven-${maven.version}-bin.zip"/>
		<property name="maven.url" value="https://archive.apache.org/dist/maven/maven-3/${maven.version}/binaries/${maven.zip}"/>
		<property name="maven.dir" value="build/apache-maven-${maven.version}"/>
		<property name="tomcat.version" value="9.0.39"/>
		<property name="tomcat.zip" value="apache-tomcat-${tomcat.version}.zip"/>
		<property name="tomcat.url" value="https://archive.apache.org/dist/tomcat/tomcat-9/v${tomcat.version}/bin/${tomcat.zip}"/>
		<property name="tomcat.dir" value="build/apache-tomcat-${tomcat.version}"/>
		<property name="tomcat.connector.port" value="80"/>
		<property name="tomcat.server.port" value="8005"/>
		<property name="winmerge.version" value="2.16.6"/>
		<property name="winmerge.zip" value="winmerge-${winmerge.version}-exe.zip"/>
		<property name="winmerge.url" value="https://github.com/WinMerge/winmerge/releases/download/${winmerge.version}/${winmerge.zip}"/>
		<property name="winmerge.dir" value="build/winmerge-${winmerge.version}-x64-exe"/>
		<property name="ff.version" value="7.6-20200501.172313"/>
		<property name="ff.war" value="ibis-adapterframework-webapp-${ff.version}.war"/>
		<property name="ff.url" value="https://nexus.ibissource.org/content/groups/public/org/ibissource/ibis-adapterframework-webapp/${ff.version}/${ff.war}"/>
		<property name="ff.dir" value="${tomcat.dir}/webapps/${context.path}"/>
		<property name="jms.version" value="1.1_spec-1.1"/>
		<property name="jms.jar" value="geronimo-jms_${jms.version}.jar"/>
		<property name="jms.url" value="https://repo1.maven.org/maven2/org/apache/geronimo/specs/geronimo-jms_1.1_spec/1.1/${jms.jar}"/>
		<property name="h2.version" value="1.4.200"/>
		<property name="h2.jar" value="h2-${h2.version}.jar"/>
		<property name="h2.url" value="https://repo1.maven.org/maven2/com/h2database/h2/${h2.version}/${h2.jar}"/>
		<property name="h2.dir" value="${basedir}/build/h2"/>
		<property name="ojdbc.version" value="8-19.3.0.0"/>
		<property name="ojdbc.jar" value="ojdbc${ojdbc.version}.jar"/>
		<property name="ojdbc.url" value="https://repo1.maven.org/maven2/com/oracle/ojdbc/ojdbc8/19.3.0.0/${ojdbc.jar}"/>
		<property name="mssql.version" value="7.4.1.jre8"/>
		<property name="mssql.jar" value="mssql-jdbc-${mssql.version}.jar"/>
		<property name="mssql.url" value="https://repo1.maven.org/maven2/com/microsoft/sqlserver/mssql-jdbc/${mssql.version}/${mssql.jar}"/>

		<available property="jdk.zip.available" file="download/${jdk.zip}"/>
		<available property="jdk.dir.available" file="${jdk.dir}"/>
		<available property="ant.zip.available" file="download/${ant.zip}"/>
		<available property="ant.dir.available" file="${ant.dir}"/>
		<available property="maven.zip.available" file="download/${maven.zip}"/>
		<available property="maven.dir.available" file="${maven.dir}"/>
		<available property="tomcat.zip.available" file="download/${tomcat.zip}"/>
		<available property="tomcat.dir.available" file="${tomcat.dir}"/>
		<available property="winmerge.zip.available" file="download/${winmerge.zip}"/>
		<available property="winmerge.dir.available" file="${winmerge.dir}"/>
		<available property="ff.war.available" file="download/${ff.war}"/>
		<available property="ff.dir.available" file="${ff.dir}"/>
		<available property="jms.jar.available" file="download/${jms.jar}"/>
		<available property="h2.jar.available" file="download/${h2.jar}"/>
		<available property="ojdbc.jar.available" file="download/${ojdbc.jar}"/>
		<available property="mssql.jar.available" file="download/${mssql.jar}"/>

		<property name="larva.windiff.command" value="${basedir}/${winmerge.dir}/WinMerge/WinMergeU.exe"/><!-- defined here and not at the beginning of this file where most properties are defined as it depends on ${winmerge.dir} -->
		<propertyset id="system.properties.set">
			<propertyref builtin="commandline"/>
			<propertyref name="dtap.stage"/>
			<propertyref name="instance.name"/>
			<propertyref name="ibistesttool.directory"/>
			<propertyref name="larva.windiff.command"/>
		</propertyset>
		<property name="system.properties.comma.separated" value="${toString:system.properties.set}"/>
		<scriptdef language="javascript" name="systemproperties">
			<attribute name="name"/>
			<attribute name="commaseparated"/>
			var commaSeparated = attributes.get("commaseparated").split(', ');
			var value = '';
			for (var i = 0; i &lt; commaSeparated.length; i++) {
				if (!commaSeparated[i].startsWith('ant.')) {
					value += '\n' + commaSeparated[i].replace(/\\/g, "\\\\");
				}
			}
			project.setProperty(attributes.get("name"), value);
		</scriptdef>
		<systemproperties name="system.properties" commaseparated="${system.properties.comma.separated}"/>

		<property name="configurations.dirset.dir" value="${projects.dir}"/>
		<property name="configurations.dir.abs" location="${configurations.dirset.dir}/${project.dir}/${configurations.dir}"/>
		<property name="configurations.dir.rel" basedir="${configurations.dirset.dir}" value="${configurations.dir.abs}" relative="true"/>
		<property name="configurations.dirset.includes" value="${project.dir}/${configurations.dir}/*,${project.dir}_*/src/main/configuration/*" if:set="war.pom.xml.available"/>
		<property name="configurations.dirset.includes" value="${configurations.dir.rel}/*"/><!-- the use of configurations.dir.rel makes it possible to use ../.. in configurations.dir and still have the includes work (.abs removes the ../.. and .rel will make it relative again) -->
		<dirset id="configurations.dirs.id" dir="${configurations.dirset.dir}" includes="${configurations.dirset.includes}"/>
		<pathconvert property="configurations.dirs" refid="configurations.dirs.id" pathsep="|"/>
		<pathconvert property="configurations.dirs.flat" refid="configurations.dirs.id" pathsep="|"><mapper type="flatten"/></pathconvert>
		<scriptdef language="javascript" name="configurationsproperties">
			<attribute name="name"/>
			<attribute name="configurationsdirabs"/>
			<attribute name="configurationnamedefault"/>
			<attribute name="configurationsnames"/>
			<attribute name="configurationsnamesds"/>
			<attribute name="configurationsdirs"/>
			<attribute name="configurationsdirsflat"/>
			<attribute name="classloadertype"/>
			var configurationsDirAbs = attributes.get("configurationsdirabs");
			var configurationNameDefault = attributes.get("configurationnamedefault");
			var configurationsNames = attributes.get("configurationsnames");
			var configurationsNamesDs = attributes.get("configurationsnamesds");
			var configurationsDirs = attributes.get("configurationsdirs").split('|');
			var configurationsDirsFlat = attributes.get("configurationsdirsflat").split('|');
			var classLoaderType = attributes.get("classloadertype");
			var value = '';
			value += '\n# Set configurations.directory based on Frank!Runner properties';
			value += '\nconfigurations.directory=' + configurationsDirAbs.replace(/\\/g, "\\\\");
			if (configurationsNames != '${configurations.names}') {
				value += '\n# Set configurations.names to Frank!Runner property with the same name';
				value += '\nconfigurations.names=' + configurationsNames.replace(/\\/g, "\\\\");
			} else {
				if (configurationsNamesDs == '${ds.properties.configurations.names}') {
					value += '\n# Set configurations.names to the list of folders in configurations.directory';
					if (configurationNameDefault != '${configuration.name.default}') {
						value += ' (plus ' + configurationNameDefault + ' because a Configuration.xml is detected in classes.dir)';
						value += '\nconfigurations.names=' + configurationNameDefault.replace(/\\/g, "\\\\") + ',';
					} else {
						value += '\nconfigurations.names=';
					}
					if (configurationsDirsFlat.toString().length() > 0) {
						value += configurationsDirsFlat.toString().replace(/\\/g, "\\\\");
					}
				} else {
					value += '\n# Don\'t set configurations.names as it is spedified in DeploymentSpecifics.properties';
				}
			}
			if (configurationsDirsFlat.toString().length() > 0) {
				value += '\n# Set .classLoaderType and .directory property for every folder in configurations.directory';
				for (var i = 0; i &lt; configurationsDirs.length; i++) {
					value += '\nconfigurations.' + configurationsDirsFlat[i] + '.classLoaderType='+ classLoaderType;
					value += '\nconfigurations.' + configurationsDirsFlat[i] + '.directory=' + configurationsDirs[i].substring(0, configurationsDirs[i].length() - configurationsDirsFlat[i].length() - 1).replace(/\\/g, "\\\\");
				}
			}
			project.setProperty(attributes.get("name"), value);
		</scriptdef>
		<configurationsproperties name="configurations.properties" configurationsdirabs="${configurations.dir.abs}" configurationnamedefault="${configuration.name.default}" configurationsnames="${configurations.names}" configurationsnamesds="${ds.properties.configurations.names}" configurationsdirs="${configurations.dirs}" configurationsdirsflat="${configurations.dirs.flat}" classloadertype="${classloader.type}"/>

		<property name="projects.dir.abs" location="${projects.dir}"/>
		<property name="scenariosroot.default" basedir="${projects.dir}" location="${projects.dir}/${project.dir}_${sub.project}/${tests.dir}" relative="true" if:set="sub.project"/>
		<property name="tests.dirset.dir" value="${projects.dir}"/>
		<property name="tests.dir.abs" location="${tests.dirset.dir}/${project.dir}/${tests.dir}"/>
		<property name="tests.dir.rel" basedir="${tests.dirset.dir}" value="${tests.dir.abs}" relative="true"/>
		<property name="tests.dirset.includes" value="${project.dir}/${tests.dir},${project.dir}_*/src/test/testtool" if:set="war.pom.xml.available"/>
		<property name="tests.dirset.includes" value="${tests.dir.rel}"/><!-- the use of tests.dir.rel makes it possible to use ../.. in tests.dir and still have the includes work (.abs removes the ../.. and .rel will make it relative again) -->
		<dirset id="tests.dirs.id" dir="${tests.dirset.dir}" includes="${tests.dirset.includes}"/>
		<pathconvert property="tests.dirs" refid="tests.dirs.id" pathsep="|"/>
		<scriptdef language="javascript" name="testsproperties">
			<attribute name="name"/>
			<attribute name="projectsdirabs"/>
			<attribute name="scenariosrootdefault"/>
			<attribute name="testsdirs"/>
			var projectsDirAbs = attributes.get("projectsdirabs");
			var scenariosrootDefault = attributes.get("scenariosrootdefault");
			var testsDirs = attributes.get("testsdirs").split('|');
			var value = '';
			if (scenariosrootDefault != '${scenariosroot.default}') {
				value += '\nscenariosroot.default=' + scenariosrootDefault.replace(/\\/g, "\\\\");
			}
			for (var i = 0; i &lt; testsDirs.length; i++) {
				value += '\nscenariosroot' + (i + 1) + '.description='+ testsDirs[i].substring(projectsDirAbs.length() + 1).replace(/\\/g, "\\\\");
				value += '\nscenariosroot' + (i + 1) + '.directory=' + testsDirs[i].replace(/\\/g, "\\\\");
			}
			project.setProperty(attributes.get("name"), value);
		</scriptdef>
		<testsproperties name="tests.properties" projectsdirabs="${projects.dir.abs}" scenariosrootdefault="${scenariosroot.default}" testsdirs="${tests.dirs}"/>

		<loadresource property="jdk.dir.windows"><propertyresource name="jdk.dir"/><filterchain><tokenfilter><filetokenizer/><replacestring from="/" to="\"/></tokenfilter></filterchain></loadresource>
		<loadresource property="ant.dir.windows"><propertyresource name="ant.dir"/><filterchain><tokenfilter><filetokenizer/><replacestring from="/" to="\"/></tokenfilter></filterchain></loadresource>
		<loadresource property="maven.dir.windows"><propertyresource name="maven.dir"/><filterchain><tokenfilter><filetokenizer/><replacestring from="/" to="\"/></tokenfilter></filterchain></loadresource>
		<loadresource property="tomcat.dir.windows"><propertyresource name="tomcat.dir"/><filterchain><tokenfilter><filetokenizer/><replacestring from="/" to="\"/></tokenfilter></filterchain></loadresource>

		<tstamp><format property="get.build.tstamp" pattern="yyyyMMdd"/></tstamp>
		<condition property="get.build"><not><resourceexists><file file="download/frank-runner/build-${get.build.tstamp}.txt"/></resourceexists></not></condition>
		<property name="get.build.maxtime" value="10"/>
		<property name="get.build.ignoreerrors" value="true"/>
		<mkdir dir="download/frank-runner"/>
		<get src="https://raw.githubusercontent.com/ibissource/frank-runner/master/build.xml" dest="download/frank-runner/build.xml" maxtime="${get.build.maxtime}" ignoreerrors="${get.build.ignoreerrors}" verbose="on" if:set="get.build"/>
		<echo file="download/frank-runner/build-${get.build.tstamp}.txt" if:set="get.build"/>
		<condition property="frank.runner.up.to.date"><or><filesmatch file1="build.xml" file2="download/frank-runner/build.xml" textfile="true"/><not><resourceexists><file file="download/frank-runner/build.xml"/></resourceexists></not></or></condition>
	</target>

	<target name="build" depends="init,get.java,get.ant,get.maven,get.tomcat,get.winmerge,get.ff,get.jms,get.h2,get.ojdbc,get.mssql">
		<!-- jdk -->
		<unzip src="download/${jdk.zip}" dest="build" unless:set="jdk.dir.available">
			<patternset>
				<exclude name="**/demo"/>
				<exclude name="**/sample"/>
				<exclude name="**/src.zip"/>
			</patternset>
		</unzip>
		<!-- ant -->
		<unzip src="download/${ant.zip}" dest="build" unless:set="ant.dir.available">
			<patternset>
				<exclude name="**/manual"/>
			</patternset>
		</unzip>
		<!-- maven -->
		<unzip src="download/${maven.zip}" dest="build" unless:set="maven.dir.available"/>
		<property name="webapp.dir" value="${ff.dir}" unless:true="${maven}"/>
		<property name="webapp.dir" value="${projects.dir}/${project.dir}/war/src/main/webapp" if:set="war.pom.xml.available" if:true="${maven}"/>
		<property name="webapp.dir" value="${projects.dir}/${project.dir}/src/main/webapp" if:set="pom.xml.available" if:true="${maven}"/>
		<property name="webapp.gitignore" value="/iaf/&#10;/images/&#10;/js/&#10;/jsp/&#10;/larva/&#10;/META-INF/maven/&#10;/META-INF/MANIFEST.MF&#10;/WEB-INF/&#10;/body.css&#10;/favicon.ico&#10;/ie4.css&#10;/ie55.css" if:true="${maven}"/>
		<property name="webapp.clean" value="     iaf/**    images/**    js/**    jsp/**    larva/**    META-INF/maven/**    META-INF/MANIFEST.MF      WEB-INF/**    body.css      favicon.ico      ie4.css      ie55.css" if:true="${maven.clean}"/>
		<condition property="webapp.gitignore.add" unless:true="${webapp.gitignore.skip}" if:true="${maven}"><not><resourcecontains resource="${webapp.dir}/.gitignore" substring="${webapp.gitignore}"/></not></condition>
		<condition property="webapp.gitignore.add.newline" if:true="${webapp.gitignore.add}"><length file="${webapp.dir}/.gitignore" when="greater" length="0"/></condition>
		<echo file="${webapp.dir}/.gitignore" message="&#10;" append="true" if:true="${webapp.gitignore.add.newline}"/>
		<echo file="${webapp.dir}/.gitignore" message="${webapp.gitignore}" append="true" if:true="${webapp.gitignore.add}"/>
		<property name="project.gitignore" value="/target/" if:true="${maven}"/>
		<condition property="project.gitignore.add" unless:true="${project.gitignore.skip}" if:true="${maven}"><not><resourcecontains resource="${projects.dir}/${project.dir}/.gitignore" substring="${project.gitignore}"/></not></condition>
		<condition property="project.gitignore.add.newline" if:true="${project.gitignore.add}"><length file="${projects.dir}/${project.dir}/.gitignore" when="greater" length="0"/></condition>
		<echo file="${projects.dir}/${project.dir}/.gitignore" message="&#10;" append="true" if:true="${project.gitignore.add.newline}"/>
		<echo file="${projects.dir}/${project.dir}/.gitignore" message="${project.gitignore}" append="true" if:true="${project.gitignore.add}"/>
		<delete includeEmptyDirs="true" verbose="${maven.verbose}" unless:true="${webapp.clean.skip}" if:true="${maven}"><fileset dir="${webapp.dir}" includes="${webapp.clean}" defaultexcludes="false"/></delete><!-- maven clean war:inplace doesn't clean the webapp (see also: https://stackoverflow.com/questions/12497081/maven-war-inplace-clean-classes-and-lib-folder) -->
		<exec executable="${basedir}\${maven.dir.windows}\bin\mvn.cmd" dir="${maven.exec.dir}" vmlauncher="false" failonerror="true" if:true="${maven}">
			<env key="JAVA_HOME" value="${basedir}\${jdk.dir.windows}"/>
			<arg value="--settings" if:set="maven.settings.xml"/>
			<arg value="${maven.settings.xml}" if:set="maven.settings.xml"/>
			<arg value="clean" if:true="${maven.clean}"/>
			<arg value="${maven.phase}"/>
			<arg value="war:inplace"/>
			<arg value="-DskipTests" if:true="${maven.skip.tests}"/>
			<arg value="-Dmaven.javadoc.skip=true" if:true="${maven.skip.javadoc}"/>
			<arg value="-X" if:true="${maven.verbose}"/>
		</exec>
		<!-- tomcat -->
		<unzip src="download/${tomcat.zip}" dest="build" unless:set="tomcat.dir.available"/>
		<delete includeemptydirs="true" unless:set="tomcat.dir.available"><fileset dir="${tomcat.dir}/webapps" includes="**/*"/></delete><!-- unless:set="tomcat.dir.available" to speed up startup time -->
		<copy file="download/${jms.jar}" todir="${tomcat.dir}/lib"/>
		<copy file="download/${h2.jar}" todir="${tomcat.dir}/lib"/>
		<copy file="download/${ojdbc.jar}" todir="${tomcat.dir}/lib"/>
		<copy file="download/${mssql.jar}" todir="${tomcat.dir}/lib"/>
		<replaceregexp file="${tomcat.dir}/conf/server.xml" match="(Connector port=&quot;).*(&quot; protocol=&quot;HTTP)" replace="\1${tomcat.connector.port}\2"/>
		<replaceregexp file="${tomcat.dir}/conf/server.xml" match="(Server port=&quot;).*(&quot; shutdown)" replace="\1${tomcat.server.port}\2"/>
		<replace file="${tomcat.dir}/conf/catalina.properties" token="jarsToSkip=\" value="jarsToSkip=*" summary="true" unless:set="tomcat.dir.available"/><!-- speed up startup time -->
		<replace file="${tomcat.dir}/conf/catalina.properties" token="jarsToScan=\" value="jarsToScan=frank-flow-*.jar,\" summary="true" unless:set="tomcat.dir.available"/>
		<replaceregexp file="${tomcat.dir}/conf/catalina.properties" match="\# \&lt;frank-runner\>.*\# \&lt;\/frank-runner\>" replace="" flags="sg"/>
		<concat destfile="${tomcat.dir}/conf/catalina.properties" append="true"># &lt;frank-runner>&#13;&#10;${system.properties}&#13;&#10;${configurations.properties}&#13;&#10;${tests.properties}&#13;&#10;&#13;&#10;# &lt;/frank-runner></concat>
		<replaceregexp file="${tomcat.dir}/conf/logging.properties" match="^org\.apache\.catalina\.core.ContainerBase\.\[Catalina\]\.\[localhost\]\.handlers\ " replace="# org.apache.catalina.core.ContainerBase.[Catalina].[localhost].handlers " flags="m"/><!-- Some errors end up in localhost.<date>.log (e.g. when springIbisTestTool.xml is not correct), make them show up in the console -->
		<delete><fileset dir="${tomcat.dir}/lib" includes="**-CUSTOM.jar"/></delete>
		<available property="lib.server.dir.available" file="${projects.dir}/${project.dir}/${lib.server.dir}"/>
		<copy todir="${tomcat.dir}/lib" if:set="lib.server.dir.available"><fileset dir="${projects.dir}/${project.dir}/${lib.server.dir}"/><globmapper from="*.jar" to="*-CUSTOM.jar"/></copy>
		<!-- winmerge -->
		<unzip src="download/${winmerge.zip}" dest="${winmerge.dir}" unless:set="winmerge.dir.available"/>
		<!-- webapp -->
		<property file="${webapp.dir}/META-INF/maven/org.ibissource/ibis-adapterframework-webapp/pom.properties" prefix="pom.properties."/>
		<dirset id="contexts.dirs.id" dir="${tomcat.dir}/webapps" includes="*"/>
		<pathconvert property="contexts.dirs" refid="contexts.dirs.id" dirsep="," pathsep=","><mapper type="flatten"/></pathconvert>
		<condition property="maven.or.ff.version.changed.or.context.path.changed"><or><istrue value="${maven}"/><not><equals arg1="${ff.version}" arg2="${pom.properties.version}"/></not><not><equals arg1="${contexts.dirs}" arg2="${context.path}"/></not></or></condition>
		<delete includeemptydirs="true" if:set="maven.or.ff.version.changed.or.context.path.changed"><fileset dir="${tomcat.dir}/webapps" includes="**/*"/></delete>
		<unzip src="download/${ff.war}" dest="${webapp.dir}" if:set="maven.or.ff.version.changed.or.context.path.changed" unless:true="${maven}"/>
 		<delete><fileset dir="${webapp.dir}/WEB-INF/lib" includes="**-CUSTOM.jar"/></delete>
		<available property="lib.webapp.dir.available" file="${projects.dir}/${project.dir}/${lib.webapp.dir}"/>
		<copy todir="${webapp.dir}/WEB-INF/lib" if:set="lib.webapp.dir.available"><fileset dir="${projects.dir}/${project.dir}/${lib.webapp.dir}"/><globmapper from="*.jar" to="*-CUSTOM.jar"/></copy>
		<fileset id="webapp.lib.jars.id" dir="${webapp.dir}/WEB-INF/lib" includes="*.jar"/>
		<pathconvert property="webapp.lib.jars" refid="webapp.lib.jars.id" pathsep="|"><mapper type="flatten"/></pathconvert>
		<doublejars jars="${webapp.lib.jars}"/>
		<fail message="The following double jars are found: ${double.jars}&#10;${webapp.dir}/WEB-INF/lib&#10;- When maven=true use maven.clean=true at least once&#10;- Check your pom.xml for dependencies that are being added that are already in the framework war (Maven doesn't check for duplicates against jar files in a war)&#10;- The framework war might contain a duplicate jar which should be reported as a bug (when an artifact changes it's groupid between versions Maven will not detect it to be a duplicat jar when one transitive dependency has the old one and another has the new one so one of them has to be excluded in the framework pom.xml)&#10;- As a workaround use ignore.double.jars=true" if:set="double.jars" unless:true="${ignore.double.jars}"/>
		<!-- context.xml -->
		<available property="context.xml.source" value="${projects.dir}/${project.dir}/${context.xml}" file="${projects.dir}/${project.dir}/${context.xml}"/>
		<property name="context.xml.source" value="database/${database.type}/context.xml"/>
		<property name="context.xml.target" value="${webapp.dir}/META-INF/context.xml" unless:true="${maven}"/>
		<property name="context.xml.target" value="${tomcat.dir}/conf/Catalina/localhost/${context.path}.xml" if:true="${maven}"/>
		<delete dir="${tomcat.dir}/conf/Catalina/localhost"/><!-- xml file could have a different name in previous run or in previous run maven could be true and in current run false -->
		<delete file="${context.xml.target}"/><!-- in case ${context.xml.source} doesn't point to a file next copy will not clean ${context.xml.target} -->
		<copy file="${context.xml.source}" tofile="${context.xml.target}"/>
		<lower from="${instance.name}" to="instance.name.lc"/>
		<replace file="${context.xml.target}" token="@instance.name.lc@" value="${instance.name.lc}" summary="true"/>
		<replace file="${context.xml.target}" token="@h2.dir@" value="${h2.dir}" summary="true"/>
		<replace file="${tomcat.dir}/conf/Catalina/localhost/${context.path}.xml" token="&lt;Context>" value="&lt;Context docBase=&quot;${webapp.dir}&quot;>" summary="true" if:true="${maven}"/>
		<!-- classes -->
		<delete dir="${webapp.dir}/WEB-INF/classes" unless:true="${maven}"/>
		<mkdir dir="${webapp.dir}/WEB-INF/classes" unless:true="${maven}"/>
		<available property="java.dir.available" file="${projects.dir}/${project.dir}/${java.dir}"/>
		<javac srcdir="${projects.dir}/${project.dir}/${java.dir}" destdir="${webapp.dir}/WEB-INF/classes" includeantruntime="false" if:set="java.dir.available" unless:true="${maven}">
			<classpath>
				<fileset dir="${webapp.dir}/WEB-INF/lib"><include name="*.jar"/></fileset>
				<fileset dir="${tomcat.dir}/lib"><include name="*.jar"/></fileset>
			</classpath>
		</javac>
		<available property="classes.dir.available" file="${projects.dir}/${project.dir}/${classes.dir}"/>
		<copy todir="${webapp.dir}/WEB-INF/classes" if:set="classes.dir.available" unless:true="${maven}">
			<fileset dir="${projects.dir}/${project.dir}/${classes.dir}"/>
		</copy>
		<!-- scripts -->
		<antcall target="generate.bat"><param name="filename" value="ant"/></antcall>
		<antcall target="generate.bat"><param name="filename" value="mvn"/></antcall>
		<antcall target="generate.bat"><param name="filename" value="start"/></antcall>
		<antcall target="generate.bat"><param name="filename" value="stop"/></antcall>
		<antcall target="generate.bat"><param name="filename" value="run"/></antcall>
		<antcall target="generate.bat"><param name="filename" value="restart"/></antcall>
		<antcall target="generate.bat"><param name="filename" value="rerun"/></antcall>
	</target>

	<target name="start" depends="build">
		<condition property="use.exec"><not><equals arg1="${use}" arg2="java"/></not></condition>
		<condition property="use.java"><equals arg1="${use}" arg2="java"/></condition>
		<!-- with exec in windows a new window will be opened -->
		<exec executable="${tomcat.dir.windows}\bin\catalina.bat" output="${tomcat.dir.windows}\logs\tomcat-start.txt" vmlauncher="false" failonerror="true" if:set="use.exec">
			<arg value="start"/>
			<env key="JAVA_HOME" value="${jdk.dir.windows}"/>
			<env key="CATALINA_HOME" value="${tomcat.dir.windows}"/>
			<env key="JAVA_OPTS" value="-Xmx${maxmemory}"/>
		</exec>
		<!-- with java in windows no new window will be opened -->
		<java classname="org.apache.catalina.startup.Bootstrap" fork="true" spawn="true" maxmemory="${maxmemory}" if:set="use.java">
			<jvmarg value="-Dcatalina.home=${tomcat.dir}"/>
			<arg value="start"/>
			<classpath>
				<fileset dir="${tomcat.dir}/bin"><include name="*.jar"/></fileset>
				<fileset dir="${tomcat.dir}/lib"><include name="*.jar"/></fileset>
			</classpath>
		</java>
		<antcall target="splash"/>
	</target>

	<target name="run" depends="build">
		<condition property="use.exec"><equals arg1="${use}" arg2="exec"/></condition>
		<condition property="use.java"><not><equals arg1="${use}" arg2="exec"/></not></condition>
		<antcall target="splash"/>
		<echo message=" "/><!-- space instead of empty for eclipse -->
		<echo message=" "/>
		<!-- with exec in windows a ctrl-c will not kill tomcat -->
		<exec executable="${tomcat.dir.windows}\bin\catalina.bat" vmlauncher="false" failonerror="true" if:set="use.exec">
			<arg value="run"/>
			<env key="JAVA_HOME" value="${jdk.dir.windows}"/>
			<env key="CATALINA_HOME" value="${tomcat.dir.windows}"/>
			<env key="JAVA_OPTS" value="-Xmx${maxmemory}"/>
		</exec>
		<!-- with java in windows a ctrl-c will kill tomcat -->
		<java classname="org.apache.catalina.startup.Bootstrap" fork="true" failonerror="true" maxmemory="${maxmemory}" if:set="use.java">
			<jvmarg value="-Dcatalina.home=${tomcat.dir}"/>
			<arg value="start"/>
			<classpath>
				<fileset dir="${tomcat.dir}/bin"><include name="*.jar"/></fileset>
				<fileset dir="${tomcat.dir}/lib"><include name="*.jar"/></fileset>
			</classpath>
		</java>
	</target>

	<!-- don't add depends="build" because when tomcat is running resources may be locked which will result in "Unable to delete file" build failures -->
	<target name="stop" depends="init">
		<condition property="tomcat.running"><or><socket server="localhost" port="${tomcat.connector.port}"/><socket server="localhost" port="${tomcat.server.port}"/></or></condition>
		<!-- prevent error in case another process in running on the tomcat port(s) and build.xml is running for the first time so catalina.bat is not present yet -->
		<condition property="catalina.bat.not.present"><not><resourceexists><file file="${tomcat.dir.windows}\bin\catalina.bat"/></resourceexists></not></condition>
		<condition property="use.exec" if:set="tomcat.running" unless:set="catalina.bat.not.present"><not><equals arg1="${use}" arg2="java"/></not></condition>
		<condition property="use.java" if:set="tomcat.running" unless:set="catalina.bat.not.present"><equals arg1="${use}" arg2="java"/></condition>
		<exec executable="${tomcat.dir.windows}\bin\catalina.bat" output="${tomcat.dir.windows}\logs\tomcat-stop.txt" vmlauncher="false" failonerror="true" if:set="use.exec">
			<arg value="stop"/>
			<env key="JAVA_HOME" value="${jdk.dir.windows}"/>
			<env key="CATALINA_HOME" value="${tomcat.dir.windows}"/>
		</exec>
		<java classname="org.apache.catalina.startup.Bootstrap" fork="true" failonerror="true" if:set="use.java">
			<jvmarg value="-Dcatalina.home=${tomcat.dir}"/>
			<arg value="stop"/>
			<classpath>
				<fileset dir="${tomcat.dir}/bin"><include name="*.jar"/></fileset>
				<fileset dir="${tomcat.dir}/lib"><include name="*.jar"/></fileset>
			</classpath>
		</java>
		<tstamp><format property="stop.begin" pattern="HH:mm:ss"/></tstamp>
		<property name="stop.maxwait" value="300"/>
		<property name="stop.maxwaitunit" value="second"/>
		<echo message="${stop.begin} Wait max ${stop.maxwait} ${stop.maxwaitunit}s for Tomcat to stop" if:set="tomcat.running" unless:set="catalina.bat.not.present"/>
		<waitfor maxwait="${stop.maxwait}" maxwaitunit="${stop.maxwaitunit}" timeoutproperty="stop.failed" if:set="tomcat.running" unless:set="catalina.bat.not.present">
			<not><or><socket server="localhost" port="${tomcat.connector.port}"/><socket server="localhost" port="${tomcat.server.port}"/></or></not>
		</waitfor>
		<fail message="Tomcat (or another process) is still running on port ${tomcat.connector.port} and/or ${tomcat.server.port}. Please stop Tomcat manually or try again" if:set="stop.failed"/>
		<tstamp><format property="stop.end" pattern="HH:mm:ss"/></tstamp>
		<echo message="${stop.end} Done" if:set="tomcat.running" unless:set="catalina.bat.not.present"/>
	</target>

	<target name="restart">
		<antcall target="stop"/>
		<antcall target="start"/>
	</target>

	<target name="rerun">
		<antcall target="stop"/>
		<antcall target="run"/>
	</target>

	<target name="get.java" unless="jdk.zip.available">
		<get src="${jdk.url}" dest="download/${jdk.zip}" verbose="on"/>
	</target>

	<target name="get.ant" unless="ant.zip.available">
		<get src="${ant.url}" dest="download/${ant.zip}" verbose="on"/>
	</target>

	<target name="get.maven" unless="maven.zip.available">
		<get src="${maven.url}" dest="download/${maven.zip}" verbose="on"/>
	</target>

	<target name="get.tomcat" unless="tomcat.zip.available">
		<get src="${tomcat.url}" dest="download/${tomcat.zip}" verbose="on"/>
	</target>

	<target name="get.winmerge" unless="winmerge.zip.available">
		<get src="${winmerge.url}" dest="download/${winmerge.zip}" verbose="on"/>
	</target>

	<target name="get.ff" unless="ff.war.available">
		<get src="${ff.url}" dest="download/${ff.war}" verbose="on"/>
	</target>

	<target name="get.jms" unless="jms.jar.available">
		<get src="${jms.url}" dest="download/${jms.jar}" verbose="on"/>
	</target>

	<target name="get.h2" unless="h2.jar.available">
		<get src="${h2.url}" dest="download/${h2.jar}" verbose="on"/>
	</target>

	<target name="get.ojdbc" unless="ojdbc.jar.available">
		<get src="${ojdbc.url}" dest="download/${ojdbc.jar}" verbose="on"/>
	</target>
	
	<target name="get.mssql" unless="mssql.jar.available">
		<get src="${mssql.url}" dest="download/${mssql.jar}" verbose="on"/>
	</target>

	<target name="generate.bat">
		<condition property="ant"><equals arg1="${filename}" arg2="ant"/></condition>
		<condition property="mvn"><equals arg1="${filename}" arg2="mvn"/></condition>
		<condition property="ant.or.mvn"><or><isset property="ant"/><isset property="mvn"/></or></condition>
		<echo file="${filename}.bat">:: This file is generated as part of build.xml
@echo off
setlocal enabledelayedexpansion
if not exist "%~dp0download\" (
	mkdir "%~dp0download"
)
if not exist "%~dp0build\tmp\build\" (
	mkdir "%~dp0build\tmp\build"
)</echo>
		<antcall target="generate.bat.download.unzip"><param name="zip" value="${jdk.zip}"/><param name="url" value="${jdk.url}"/><param name="dir.windows" value="${jdk.dir.windows}"/></antcall>
		<antcall target="generate.bat.download.unzip" unless:set="mvn"><param name="zip" value="${ant.zip}"/><param name="url" value="${ant.url}"/><param name="dir.windows" value="${ant.dir.windows}"/></antcall>
		<antcall target="generate.bat.download.unzip" if:set="mvn"><param name="zip" value="${maven.zip}"/><param name="url" value="${maven.url}"/><param name="dir.windows" value="${maven.dir.windows}"/></antcall>
		<echo file="${filename}.bat" append="true">
set JAVA_HOME=%~dp0${jdk.dir.windows}</echo>
<echo file="${filename}.bat" append="true" unless:set="mvn">
set ANT_HOME=%~dp0${ant.dir.windows}</echo><!-- prevent problems on systems with ant installed (e.g. when ANT_HOME point to an old ant version that version will be used which might not support all tasks and attributes) -->
<echo file="${filename}.bat" append="true">
call "%~dp0</echo>
<echo file="${filename}.bat" append="true" unless:set="mvn">${ant.dir.windows}\bin\ant"</echo>
<echo file="${filename}.bat" append="true" if:set="mvn">${maven.dir.windows}\bin\mvn.cmd"</echo>
<echo file="${filename}.bat" append="true" unless:set="ant.or.mvn"> -buildfile "%~dp0build.xml"</echo>
<echo file="${filename}.bat" append="true"> %*</echo>
<echo file="${filename}.bat" append="true" unless:set="ant.or.mvn"> ${filename}</echo>
<echo file="${filename}.bat" append="true">
if %errorlevel% equ 0 goto end
:error
rem https://superuser.com/questions/527898/how-to-pause-only-if-executing-in-a-new-window
set arg0=%0
if [%arg0:~2,1%]==[:] if not [%TERM_PROGRAM%] == [vscode] pause
exit /b %errorlevel%<!-- this will make failonerror="true" work when the bat file is called from ant with the exec task -->
:end
</echo>
	</target>

	<target name="generate.bat.download.unzip">
		<echo file="${filename}.bat" append="true">
set download.help=download ${url} manually, move it to %~dp0download and restart this script
if not exist "%~dp0download\${zip}" (
	echo In case of errors %download.help%
	curl -f -o "%~dp0download\${zip}.tmp" -L ${url}<!-- -f will set errorlevel and prevent html being written to output file when for example html with an error message and http status code 404 is returned -->
	if !errorlevel! neq 0 (<!-- cannot use %errorlevel% in a block statement: https://stackoverflow.com/questions/35164750/windows-batch-errorlevel-with-if -->
		echo Please %download.help%
		goto error
	)
	move "%~dp0download\${zip}.tmp" "%~dp0download\${zip}"
)
if not exist "%~dp0${dir.windows}\" (
	tar --exclude=*/demo --exclude=*/sample --exclude=*/manual --exclude=*/src.zip -xvf "%~dp0download\${zip}" -C "%~dp0build\tmp\build"
	if !errorlevel! neq 0 (<!-- cannot use %errorlevel% in a block statement: https://stackoverflow.com/questions/35164750/windows-batch-errorlevel-with-if -->
		echo Please %download.help%
		goto error
	)
	move "%~dp0build\tmp\${dir.windows}" "%~dp0${dir.windows}"
)</echo><!-- When a proxy replaces the content of the zip with an html page saying access is denied curl doesn't notice it, hence an error occurs when unzipping and the user also needs instruction to download manually when unzipping fails -->
	</target>

	<target name="splash">
		<condition property="debug.true"><equals arg1="${debug}" arg2="true"/></condition>
		<echo message="main.project: ${main.project}" if:set="debug.true"/>
		<echo message="sub.project: ${sub.project}" if:set="debug.true"/>
		<echo message=" " if:set="debug.true"/><!-- space instead of empty for eclipse -->
		<echo message="projects.dir: ${projects.dir}" if:set="debug.true"/>
		<echo message="project.dir: ${project.dir}" if:set="debug.true"/>
		<echo message=" " if:set="debug.true"/>
		<echo message="war.pom.xml.available: ${war.pom.xml.available}" if:set="debug.true"/>
		<echo message="pom.xml.available: ${pom.xml.available}" if:set="debug.true"/>
		<echo message=" " if:set="debug.true"/>
		<echo message="classes.dir: ${classes.dir}" if:set="debug.true"/>
		<echo message="configurations.dir: ${configurations.dir}" if:set="debug.true"/>
		<echo message="java.dir: ${java.dir}" if:set="debug.true"/>
		<echo message="tests.dir: ${tests.dir}" if:set="debug.true"/>
		<echo message="context.xml: ${context.xml}" if:set="debug.true"/>
		<echo message="maven.exec.dir: ${maven.exec.dir}" if:set="debug.true"/>
		<echo message=" " if:set="debug.true"/>
		<echo message="maven: ${maven}" if:set="debug.true"/>
		<echo message="maven.clean: ${maven.clean}" if:set="debug.true"/>
		<echo message="maven.phase: ${maven.phase}" if:set="debug.true"/>
		<echo message="maven.skip.tests: ${maven.skip.tests}" if:set="debug.true"/>
		<echo message="maven.skip.javadoc: ${maven.skip.javadoc}" if:set="debug.true"/>
		<echo message="maven.verbose: ${maven.verbose}" if:set="debug.true"/>
		<echo message=" " if:set="debug.true"/>
		<echo message="classloader.type: ${classloader.type}" if:set="debug.true"/>
		<echo message="lib.server.dir: ${lib.server.dir}" if:set="debug.true"/>
		<echo message="lib.webapp.dir: ${lib.webapp.dir}" if:set="debug.true"/>
		<echo message="database.type: ${database.type}" if:set="debug.true"/>
		<echo message="dtap.stage: ${dtap.stage}" if:set="debug.true"/>
		<echo message="ds.properties.instance.name: ${ds.properties.instance.name}" if:set="debug.true"/>
		<echo message="ds.properties.configurations.names: ${ds.properties.configurations.names}" if:set="debug.true"/>
		<echo message="instance.name: ${instance.name}" if:set="debug.true"/>
		<echo message="ibistesttool.directory: ${ibistesttool.directory}" if:set="debug.true"/>
		<echo message="scenariosroot1.directory: ${scenariosroot1.directory}" if:set="debug.true"/>
		<echo message="scenariosroot1.description: ${scenariosroot1.description}" if:set="debug.true"/>
		<echo message="larva.windiff.command: ${larva.windiff.command}" if:set="debug.true"/>
		<echo message="context.path: ${context.path}" if:set="debug.true"/>
		<echo message="maxmemory: ${maxmemory}" if:set="debug.true"/>
		<echo message=" " if:set="debug.true"/>
		<echo message="update.strategy: ${update.strategy}" if:set="debug.true"/>
		<echo message="ff.version: ${ff.version}" if:set="debug.true"/>
		<echo message=" " if:set="debug.true"/>
		<echo message="webapp.dir: ${webapp.dir}" if:set="debug.true"/>
		<echo message=" " if:set="debug.true"/>
		<echo message="system.properties:${system.properties}" if:set="debug.true"/>
		<echo message=" " if:set="debug.true"/>
		<echo message="configurations.dirset.dir=${configurations.dirset.dir}" if:set="debug.true"/>
		<echo message="configurations.dir.abs=${configurations.dir.abs}" if:set="debug.true"/>
		<echo message="configurations.dir.rel=${configurations.dir.rel}" if:set="debug.true"/>
		<echo message="configurations.dirset.includes=${configurations.dirset.includes}" if:set="debug.true"/>
		<echo message="configurations.dirs.flat=${configurations.dirs.flat}" if:set="debug.true"/>
		<echo message="configurations.properties:${configurations.properties}" if:set="debug.true"/>
		<echo message=" " if:set="debug.true"/>
		<echo message="projects.dir.abs=${projects.dir.abs}" if:set="debug.true"/>
		<echo message="scenariosroot.default=${scenariosroot.default}" if:set="debug.true"/>
		<echo message="tests.dirset.dir=${tests.dirset.dir}" if:set="debug.true"/>
		<echo message="tests.dir.abs=${tests.dir.abs}" if:set="debug.true"/>
		<echo message="tests.dir.rel=${tests.dir.rel}" if:set="debug.true"/>
		<echo message="tests.dirset.includes=${tests.dirset.includes}" if:set="debug.true"/>
		<echo message="tests.properties:${tests.properties}" if:set="debug.true"/>
		<echo message=" " if:set="debug.true"/>
		<echo message="    https://github.com/ibissource/frank-runner#frankrunner" if:set="debug.true"/>
		<!-- http://www.network-science.de/ascii/ font standard -->
		<echo message="     _____                _    _ ____"/>
		<echo message="    |  ___| __ __ _ _ __ | | _| |  _ \ _   _ _ __  _ __   ___ _ __"/>
		<echo message="    | |_ | '__/ _` | '_ \| |/ / | |_) | | | | '_ \| '_ \ / _ \ '__|"/>
		<echo message="    |  _|| | | (_| | | | |   &lt;|_|  _ &lt;| |_| | | | | | | |  __/ |"/>
		<echo message="    |_|  |_|  \__,_|_| |_|_|\_(_)_| \_\\__,_|_| |_|_| |_|\___|_|"/>
		<echo message=" "/>
		<condition property="splash.name" value="${instance.name}" else="${main.project}_${sub.project}"><not><isset property="sub.project"/></not></condition>
		<condition property="splash.context" value="" else="${context.path}"><equals arg1="${context.path}" arg2="ROOT"/></condition>
		<echo message="    ${splash.name} on http://localhost/${splash.context}"/>
		<echo message=" " unless:set="frank.runner.up.to.date"/>
		<echo message="    !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!" unless:set="frank.runner.up.to.date"/>
		<echo message="    !! Your Frank!Runner is out of date, please pull or download new version !!" unless:set="frank.runner.up.to.date"/>
		<echo message="    !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!" unless:set="frank.runner.up.to.date"/>
	</target>

	<scriptdef language="javascript" name="lower">
		<attribute name="from"/> 
		<attribute name="to"/>
		project.setProperty(attributes.get("to"), attributes.get("from").toLowerCase());
	</scriptdef>

	<scriptdef language="javascript" name="doublejars">
		<attribute name="jars"/>
		var jars = attributes.get("jars").split('|');
		var doubleJars = '';
		var names = [];
		for (var i = 0; i &lt; jars.length; i++) {
			var name = '';
			var j = jars[i].indexOf('-');
			while (j != -1) {
				name = jars[i].substring(0, j);
				if (jars[i].charAt(j + 1) &gt;= '0' &amp;&amp; jars[i].charAt(j + 1) &lt;= '9') {
					j = -1;
				} else {
					j = jars[i].indexOf('-', j + 1);
				}
			}
			if (names.indexOf(name) != -1) {
				if (doubleJars.length() == 0) {
					doubleJars = name;
				} else {
					doubleJars += ', ' + name;
				}
			}
			names.push(name);
		}
		if (doubleJars.length() > 0) {
			project.setProperty('double.jars', doubleJars);
		}
	</scriptdef>

</project>
