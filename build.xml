<project default="restart" xmlns:if="ant:if" xmlns:unless="ant:unless">

	<target name="init">
		<basename property="basedir.basename" file="${basedir}"/>
		<property file="build.properties"/>

		<property name="project.dir" value="${main.project}" if:set="sub.project"/>
		<property name="configurations.names" value="${main.project},${sub.project}" if:set="sub.project"/>
		<property name="tests.dir" value="..\${main.project}_${sub.project}\src\test\testtool" if:set="sub.project"/>

		<property name="projects.dir" value="${basedir}/.."/>
		<property name="project.dir" value="${basedir.basename}/examples/Frank2Example1"/>
		<property file="${projects.dir}/${project.dir}/frank-runner.properties"/>

		<available property="war.pom.xml.available" file="${projects.dir}/${project.dir}/war/pom.xml"/>
		<available property="pom.xml.available" file="${projects.dir}/${project.dir}/pom.xml"/>

		<property name="classes.dir" value="war/src/main/resources" if:set="war.pom.xml.available"/>
		<property name="configurations.dir" value="war/src/main/configurations" if:set="war.pom.xml.available"/>
		<property name="java.dir" value="war/src/main/java" if:set="war.pom.xml.available"/>
		<property name="tests.dir" value="war/src/test/testtool" if:set="war.pom.xml.available"/>
		<property name="context.xml" value="war/src/main/webapp/META-INF/context.xml" if:set="war.pom.xml.available"/>

		<property name="classes.dir" value="src/main/resources" if:set="pom.xml.available"/>
		<property name="configurations.dir" value="src/main/configurations" if:set="pom.xml.available"/>
		<property name="java.dir" value="src/main/java" if:set="pom.xml.available"/>
		<property name="tests.dir" value="src/test/testtool" if:set="pom.xml.available"/>
		<property name="context.xml" value="src/main/webapp/META-INF/context.xml" if:set="pom.xml.available"/>

		<property name="classes.dir" value="classes"/>
		<property name="configurations.dir" value="configurations"/>
		<property name="java.dir" value="java"/>
		<property name="tests.dir" value="tests"/>
		<property name="context.xml" value="context.xml"/>

		<property name="classloader.type" value="DirectoryClassLoader"/>
		<property name="lib.server.dir" value="lib/server"/>
		<property name="lib.webapp.dir" value="lib/webapp"/>
		<property name="database.type" value="h2"/>
		<property name="dtap.stage" value="LOC"/>
		<property file="${projects.dir}/${project.dir}/${classes.dir}/DeploymentSpecifics.properties" prefix="ds.properties."/>
		<property name="instance.name" value="${ds.properties.instance.name}" if:set="ds.properties.instance.name"/>
		<basename property="instance.name" file="${project.dir}"/>
		<property name="ibistesttool.directory" value="${projects.dir}/${project.dir}/${tests.dir}"/>
		<property name="scenariosroot1.directory" value="${projects.dir}/${project.dir}/${tests.dir}"/>
		<property name="scenariosroot1.description" value="Frank!Runner"/>
		<property name="context.path" value="ROOT"/>
		<property name="maxmemory" value="1024M"/>

		<property name="update.strategy" value="latest"/>
		<condition property="update.strategy.is.latest"><equals arg1="${update.strategy}" arg2="latest"/></condition>
		<tstamp><format property="get.metadata.tstamp" pattern="yyyyMMdd-HH"/></tstamp>
		<condition property="get.metadata"><and><isset property="update.strategy.is.latest"/><not><resourceexists><file file="download/metadata/maven-metadata-${get.metadata.tstamp}.txt"/></resourceexists></not><not><isset property="ff.version"/></not></and></condition>
		<property name="get.metadata.maxtime" value="10"/>
		<property name="get.metadata.ignoreerrors" value="true"/>
		<mkdir dir="download/metadata"/>
		<get src="https://nexus.ibissource.org/service/local/repo_groups/public/content/org/ibissource/ibis-adapterframework-core/maven-metadata.xml" dest="download/metadata/maven-metadata-tmp.xml" maxtime="${get.metadata.maxtime}" ignoreerrors="${get.metadata.ignoreerrors}" verbose="on" if:set="get.metadata"/>
		<move file="download/metadata/maven-metadata-tmp.xml" tofile="download/metadata/maven-metadata.xml" failonerror="false" quiet="true"/>
		<xmlproperty file="download/metadata/maven-metadata.xml" if:set="update.strategy.is.latest"/>
		<echo file="download/metadata/maven-metadata-${get.metadata.tstamp}.txt" if:set="get.metadata">metadata.versioning.latest=${metadata.versioning.latest}</echo>
		<property name="ff.version" value="${metadata.versioning.latest}" if:set="metadata.versioning.latest"/>

		<property name="jdk.version" value="8"/>
		<property name="jdk.version.u" value="252"/>
		<property name="jdk.version.b" value="09"/>
		<property name="jdk.zip" value="OpenJDK${jdk.version}U-jdk_x64_windows_${jdk.version}u${jdk.version.u}b${jdk.version.b}.zip"/>
		<property name="jdk.url" value="https://github.com/AdoptOpenJDK/openjdk${jdk.version}-upstream-binaries/releases/download/jdk${jdk.version}u${jdk.version.u}-b${jdk.version.b}/${jdk.zip}"/>
		<property name="jdk.dir" value="build/openjdk-${jdk.version}u${jdk.version.u}-b${jdk.version.b}"/>
		<property name="ant.version." value="1.10.8"/><!-- extra . because ant.version is a build-in property -->
		<property name="ant.zip" value="apache-ant-${ant.version.}-bin.zip"/>
		<property name="ant.url" value="http://apache.redkiwi.nl/ant/binaries/${ant.zip}"/>
		<property name="ant.dir" value="build/apache-ant-${ant.version.}"/>
		<property name="tomcat.version" value="7.0.100"/>
		<property name="tomcat.zip" value="apache-tomcat-${tomcat.version}.zip"/>
		<property name="tomcat.url" value="https://archive.apache.org/dist/tomcat/tomcat-7/v${tomcat.version}/bin/${tomcat.zip}"/>
		<property name="tomcat.dir" value="build/apache-tomcat-${tomcat.version}"/>
		<property name="tomcat.connector.port" value="80"/>
		<property name="tomcat.server.port" value="8005"/>
		<property name="ff.version" value="7.6-20200501.172313"/>
		<property name="ff.war" value="ibis-adapterframework-webapp-${ff.version}.war"/>
		<property name="ff.url" value="https://nexus.ibissource.org/content/groups/public/org/ibissource/ibis-adapterframework-webapp/${ff.version}/${ff.war}"/>
		<property name="ff.dir" value="${tomcat.dir}/webapps/${context.path}"/>
		<property name="jms.version" value="1.1_spec-1.1"/>
		<property name="jms.jar" value="geronimo-jms_${jms.version}.jar"/>
		<property name="jms.url" value="https://repo1.maven.org/maven2/org/apache/geronimo/specs/geronimo-jms_1.1_spec/1.1/${jms.jar}"/>
		<property name="h2.version" value="1.4.200"/>
		<property name="h2.jar" value="h2-${h2.version}.jar"/>
		<property name="h2.url" value="https://repo1.maven.org/maven2/com/h2database/h2/${h2.version}/${h2.jar}"/>
		<property name="h2.dir" value="${basedir}/build/h2"/>
		<property name="ojdbc.version" value="8-19.3.0.0"/>
		<property name="ojdbc.jar" value="ojdbc${ojdbc.version}.jar"/>
		<property name="ojdbc.url" value="https://repo1.maven.org/maven2/com/oracle/ojdbc/ojdbc8/19.3.0.0/${ojdbc.jar}"/>
		<property name="mssql.version" value="7.4.1.jre8"/>
		<property name="mssql.jar" value="mssql-jdbc-${mssql.version}.jar"/>
		<property name="mssql.url" value="https://repo1.maven.org/maven2/com/microsoft/sqlserver/mssql-jdbc/${mssql.version}/${mssql.jar}"/>

		<available property="jdk.zip.available" file="download/${jdk.zip}"/>
		<available property="jdk.dir.available" file="${jdk.dir}"/>
		<available property="ant.zip.available" file="download/${ant.zip}"/>
		<available property="ant.dir.available" file="${ant.dir}"/>
		<available property="tomcat.zip.available" file="download/${tomcat.zip}"/>
		<available property="tomcat.dir.available" file="${tomcat.dir}"/>
		<available property="ff.war.available" file="download/${ff.war}"/>
		<available property="ff.dir.available" file="${ff.dir}"/>
		<available property="jms.jar.available" file="download/${jms.jar}"/>
		<available property="h2.jar.available" file="download/${h2.jar}"/>
		<available property="ojdbc.jar.available" file="download/${ojdbc.jar}"/>
		<available property="mssql.jar.available" file="download/${mssql.jar}"/>

		<propertyset id="system.properties.set">
			<propertyref builtin="commandline"/>
			<propertyref name="dtap.stage"/>
			<propertyref name="instance.name"/>
			<propertyref name="ibistesttool.directory"/>
			<propertyref name="scenariosroot1.directory"/>
			<propertyref name="scenariosroot1.description"/>
		</propertyset>
		<property name="system.properties.comma.separated" value="${toString:system.properties.set}"/>
		<scriptdef language="javascript" name="systemproperties">
			<attribute name="name"/>
			<attribute name="commaseparated"/>
			var commaSeparated = attributes.get("commaseparated").split(', ');
			var value = '';
			for (var i = 0; i &lt; commaSeparated.length; i++) {
				if (!commaSeparated[i].startsWith('ant.')) {
					value += '\n' + commaSeparated[i].replace(/\\/g, "\\\\");
				}
			}
			project.setProperty(attributes.get("name"), value);
		</scriptdef>
		<systemproperties name="system.properties" commaseparated="${system.properties.comma.separated}"/>

		<property name="configurations.dirset.dir" value="${projects.dir}"/>
		<property name="configurations.dirset.includes" value="${project.dir}/${configurations.dir}/*,${project.dir}_*/src/main/configuration/*" if:set="war.pom.xml.available"/>
		<property name="configurations.dirset.includes" value="${project.dir}/${configurations.dir}/*"/>
		<dirset id="configurations.dirs.id" dir="${configurations.dirset.dir}" includes="${configurations.dirset.includes}"/>
		<pathconvert property="configurations.dirs" refid="configurations.dirs.id" pathsep="|"/>
		<pathconvert property="configurations.dirs.flat" refid="configurations.dirs.id" pathsep="|"><mapper type="flatten"/></pathconvert>
		<scriptdef language="javascript" name="configurationsproperties">
			<attribute name="name"/>
			<attribute name="configurationsdir"/>
			<attribute name="configurationsnames"/>
			<attribute name="configurationsnamesds"/>
			<attribute name="configurationsdirs"/>
			<attribute name="configurationsdirsflat"/>
			<attribute name="classloadertype"/>
			var configurationsDir = attributes.get("configurationsdir");
			var configurationsNames = attributes.get("configurationsnames");
			var configurationsNamesDs = attributes.get("configurationsnamesds");
			var configurationsDirs = attributes.get("configurationsdirs").split('|');
			var configurationsDirsFlat = attributes.get("configurationsdirsflat").split('|');
			var classLoaderType = attributes.get("classloadertype");
			var value = '\nconfigurations.directory=' + configurationsDir.replace(/\\/g, "\\\\");
			if (configurationsNames != '${configurations.names}') {
				value += '\nconfigurations.names=' + configurationsNames.replace(/\\/g, "\\\\");
			} else {
				if (configurationsNamesDs == '${ds.properties.configurations.names}') {
					if (configurationsDirsFlat.toString().length() > 0) {
						value += '\nconfigurations.names=' + configurationsDirsFlat.toString().replace(/\\/g, "\\\\");
					}
				}
			}
			if (configurationsDirsFlat.toString().length() > 0) {
				for (var i = 0; i &lt; configurationsDirs.length; i++) {
					value += '\nconfigurations.' + configurationsDirsFlat[i] + '.classLoaderType='+ classLoaderType;
					value += '\nconfigurations.' + configurationsDirsFlat[i] + '.directory=' + configurationsDirs[i].substring(0, configurationsDirs[i].length() - configurationsDirsFlat[i].length() - 1).replace(/\\/g, "\\\\");
				}
			}
			project.setProperty(attributes.get("name"), value);
		</scriptdef>
		<configurationsproperties name="configurations.properties" configurationsdir="${projects.dir}/${project.dir}/${configurations.dir}" configurationsnames="${configurations.names}" configurationsnamesds="${ds.properties.configurations.names}" configurationsdirs="${configurations.dirs}" configurationsdirsflat="${configurations.dirs.flat}" classloadertype="${classloader.type}"/>

		<loadresource property="jdk.dir.windows"><propertyresource name="jdk.dir"/><filterchain><tokenfilter><filetokenizer/><replacestring from="/" to="\"/></tokenfilter></filterchain></loadresource>
		<loadresource property="ant.dir.windows"><propertyresource name="ant.dir"/><filterchain><tokenfilter><filetokenizer/><replacestring from="/" to="\"/></tokenfilter></filterchain></loadresource>
		<loadresource property="tomcat.dir.windows"><propertyresource name="tomcat.dir"/><filterchain><tokenfilter><filetokenizer/><replacestring from="/" to="\"/></tokenfilter></filterchain></loadresource>

		<tstamp><format property="get.build.tstamp" pattern="yyyyMMdd"/></tstamp>
		<condition property="get.build"><not><resourceexists><file file="download/frank-runner/build-${get.build.tstamp}.txt"/></resourceexists></not></condition>
		<property name="get.build.maxtime" value="10"/>
		<property name="get.build.ignoreerrors" value="true"/>
		<mkdir dir="download/frank-runner"/>
		<get src="https://raw.githubusercontent.com/ibissource/frank-runner/master/build.xml" dest="download/frank-runner/build.xml" maxtime="${get.build.maxtime}" ignoreerrors="${get.build.ignoreerrors}" verbose="on" if:set="get.build"/>
		<echo file="download/frank-runner/build-${get.build.tstamp}.txt" if:set="get.build"/>
		<condition property="frank.runner.up.to.date"><or><filesmatch file1="build.xml" file2="download/frank-runner/build.xml" textfile="true"/><not><resourceexists><file file="download/frank-runner/build.xml"/></resourceexists></not></or></condition>
	</target>

	<target name="build" depends="init,get.java,get.ant,get.tomcat,get.ff,get.jms,get.h2,get.ojdbc,get.mssql">
		<!-- jdk -->
		<unzip src="download/${jdk.zip}" dest="build" unless:set="jdk.dir.available"/>
		<!-- ant -->
		<unzip src="download/${ant.zip}" dest="build" unless:set="ant.dir.available"/>
		<!-- tomcat -->
		<unzip src="download/${tomcat.zip}" dest="build" unless:set="tomcat.dir.available"/>
		<delete includeemptydirs="true" unless:set="tomcat.dir.available"><fileset dir="${tomcat.dir}/webapps" includes="**/*"/></delete><!-- speed up startup time -->
		<copy file="download/${jms.jar}" todir="${tomcat.dir}/lib"/>
		<copy file="download/${h2.jar}" todir="${tomcat.dir}/lib"/>
		<copy file="download/${ojdbc.jar}" todir="${tomcat.dir}/lib"/>
		<copy file="download/${mssql.jar}" todir="${tomcat.dir}/lib"/>
		<replaceregexp file="${tomcat.dir}/conf/server.xml" match="(Connector port=&quot;).*(&quot; protocol=&quot;HTTP)" replace="\1${tomcat.connector.port}\2"/>
		<replaceregexp file="${tomcat.dir}/conf/server.xml" match="(Server port=&quot;).*(&quot; shutdown)" replace="\1${tomcat.server.port}\2"/>
		<replace file="${tomcat.dir}/conf/catalina.properties" token="jarsToSkip=\" value="jarsToSkip=*" summary="true" unless:set="tomcat.dir.available"/><!-- Speed up startup time -->
		<replaceregexp file="${tomcat.dir}/conf/catalina.properties" match="\# \&lt;frank-runner\>.*\# \&lt;\/frank-runner\>" replace="" flags="sg"/>
		<concat destfile="${tomcat.dir}/conf/catalina.properties" append="true"># &lt;frank-runner>&#13;&#10;${system.properties}&#13;&#10;${configurations.properties}&#13;&#10;&#13;&#10;# &lt;/frank-runner></concat>
		<delete><fileset dir="${tomcat.dir}/lib" includes="**-CUSTOM.jar"/></delete>
		<available property="lib.server.dir.available" file="${projects.dir}/${project.dir}/${lib.server.dir}"/>
		<copy todir="${tomcat.dir}/lib" if:set="lib.server.dir.available"><fileset dir="${projects.dir}/${project.dir}/${lib.server.dir}"/><globmapper from="*.jar" to="*-CUSTOM.jar"/></copy>
		<!-- webapp -->
		<property file="${tomcat.dir}/webapps/${context.path}/META-INF/maven/org.ibissource/ibis-adapterframework-webapp/pom.properties" prefix="pom.properties."/>
		<dirset id="contexts.dirs.id" dir="${tomcat.dir}/webapps" includes="*"/>
		<pathconvert property="contexts.dirs" refid="contexts.dirs.id" dirsep="," pathsep=","><mapper type="flatten"/></pathconvert>
		<condition property="ff.version.or.context.path.changed"><or><not><equals arg1="${ff.version}" arg2="${pom.properties.version}"/></not><not><equals arg1="${contexts.dirs}" arg2="${context.path}"/></not></or></condition>
		<delete dir="${tomcat.dir}/webapps" if:set="ff.version.or.context.path.changed"/>
		<unzip src="download/${ff.war}" dest="${ff.dir}" if:set="ff.version.or.context.path.changed"/>
		<delete><fileset dir="${tomcat.dir}/webapps/${context.path}/WEB-INF/lib" includes="**-CUSTOM.jar"/></delete>
		<available property="lib.webapp.dir.available" file="${projects.dir}/${project.dir}/${lib.webapp.dir}"/>
		<copy todir="${tomcat.dir}/webapps/${context.path}/WEB-INF/lib" if:set="lib.webapp.dir.available"><fileset dir="${projects.dir}/${project.dir}/${lib.webapp.dir}"/><globmapper from="*.jar" to="*-CUSTOM.jar"/></copy>
		<!-- context.xml -->
		<delete file="${tomcat.dir}/webapps/${context.path}/META-INF/context.xml"/>
		<available property="context.xml.available" file="${projects.dir}/${project.dir}/${context.xml}"/>
		<copy file="${projects.dir}/${project.dir}/${context.xml}" todir="${tomcat.dir}/webapps/${context.path}/META-INF" if:set="context.xml.available"/>
		<copy file="database/${database.type}/context.xml" todir="${tomcat.dir}/webapps/${context.path}/META-INF" unless:set="context.xml.available"/>
		<lower from="${instance.name}" to="instance.name.lc"/>
		<replace file="${tomcat.dir}/webapps/${context.path}/META-INF/context.xml" token="@instance.name.lc@" value="${instance.name.lc}" summary="true"/>
		<replace file="${tomcat.dir}/webapps/${context.path}/META-INF/context.xml" token="@h2.dir@" value="${h2.dir}" summary="true"/>
		<!-- classes -->
		<delete dir="${tomcat.dir}/webapps/${context.path}/WEB-INF/classes"/>
		<mkdir dir="${tomcat.dir}/webapps/${context.path}/WEB-INF/classes"/>
		<available property="java.dir.available" file="${projects.dir}/${project.dir}/${java.dir}"/>
		<javac srcdir="${projects.dir}/${project.dir}/${java.dir}" destdir="${tomcat.dir}/webapps/${context.path}/WEB-INF/classes" includeantruntime="false" if:set="java.dir.available">
			<classpath>
				<fileset dir="${tomcat.dir}/webapps/${context.path}/WEB-INF/lib"><include name="*.jar"/></fileset>
				<fileset dir="${tomcat.dir}/lib"><include name="*.jar"/></fileset>
			</classpath>
		</javac>
		<available property="classes.dir.available" file="${projects.dir}/${project.dir}/${classes.dir}"/>
		<copy todir="${tomcat.dir}/webapps/${context.path}/WEB-INF/classes" if:set="classes.dir.available">
			<fileset dir="${projects.dir}/${project.dir}/${classes.dir}"/>
		</copy>
		<!-- scripts -->
		<antcall target="generate.bat"><param name="param1" value="ant"/></antcall>
		<antcall target="generate.bat"><param name="param1" value="start"/></antcall>
		<antcall target="generate.bat"><param name="param1" value="stop"/></antcall>
		<antcall target="generate.bat"><param name="param1" value="run"/></antcall>
		<antcall target="generate.bat"><param name="param1" value="restart"/></antcall>
		<antcall target="generate.bat"><param name="param1" value="rerun"/></antcall>
	</target>

	<target name="start" depends="build">
		<condition property="use.exec"><not><equals arg1="${use}" arg2="java"/></not></condition>
		<condition property="use.java"><equals arg1="${use}" arg2="java"/></condition>
		<!-- with exec in windows a new window will be opened -->
		<exec executable="${tomcat.dir.windows}\bin\catalina.bat" output="${tomcat.dir.windows}\logs\tomcat-start.txt" vmlauncher="false" failonerror="true" if:set="use.exec">
			<arg value="start"/>
			<env key="JAVA_HOME" value="${jdk.dir.windows}"/>
			<env key="CATALINA_HOME" value="${tomcat.dir.windows}"/>
			<env key="JAVA_OPTS" value="-Xmx${maxmemory}"/>
		</exec>
		<!-- with java in windows no new window will be opened -->
		<java classname="org.apache.catalina.startup.Bootstrap" fork="true" spawn="true" maxmemory="${maxmemory}" if:set="use.java">
			<jvmarg value="-Dcatalina.home=${tomcat.dir}"/>
			<arg value="start"/>
			<classpath>
				<fileset dir="${tomcat.dir}/bin"><include name="*.jar"/></fileset>
				<fileset dir="${tomcat.dir}/lib"><include name="*.jar"/></fileset>
			</classpath>
		</java>
		<antcall target="splash"/>
	</target>

	<target name="run" depends="build">
		<condition property="use.exec"><equals arg1="${use}" arg2="exec"/></condition>
		<condition property="use.java"><not><equals arg1="${use}" arg2="exec"/></not></condition>
		<antcall target="splash"/>
		<echo message=""/>
		<echo message=""/>
		<!-- with exec in windows a ctrl-c will not kill tomcat -->
		<exec executable="${tomcat.dir.windows}\bin\catalina.bat" vmlauncher="false" failonerror="true" if:set="use.exec">
			<arg value="run"/>
			<env key="JAVA_HOME" value="${jdk.dir.windows}"/>
			<env key="CATALINA_HOME" value="${tomcat.dir.windows}"/>
			<env key="JAVA_OPTS" value="-Xmx${maxmemory}"/>
		</exec>
		<!-- with java in windows a ctrl-c will kill tomcat -->
		<java classname="org.apache.catalina.startup.Bootstrap" fork="true" failonerror="true" maxmemory="${maxmemory}" if:set="use.java">
			<jvmarg value="-Dcatalina.home=${tomcat.dir}"/>
			<arg value="start"/>
			<classpath>
				<fileset dir="${tomcat.dir}/bin"><include name="*.jar"/></fileset>
				<fileset dir="${tomcat.dir}/lib"><include name="*.jar"/></fileset>
			</classpath>
		</java>
	</target>

	<!-- don't add depends="build" because when tomcat is running resources may be locked which will result in "Unable to delete file" build failures -->
	<target name="stop" depends="init">
		<condition property="tomcat.running"><or><socket server="localhost" port="${tomcat.connector.port}"/><socket server="localhost" port="${tomcat.server.port}"/></or></condition>
		<!-- prevent error in case another process in running on the tomcat port(s) and build.xml is running for the first time so catalina.bat is not present yet -->
		<condition property="catalina.bat.not.present"><not><resourceexists><file file="${tomcat.dir.windows}\bin\catalina.bat"/></resourceexists></not></condition>
		<condition property="use.exec" if:set="tomcat.running" unless:set="catalina.bat.not.present"><not><equals arg1="${use}" arg2="java"/></not></condition>
		<condition property="use.java" if:set="tomcat.running" unless:set="catalina.bat.not.present"><equals arg1="${use}" arg2="java"/></condition>
		<exec executable="${tomcat.dir.windows}\bin\catalina.bat" output="${tomcat.dir.windows}\logs\tomcat-stop.txt" vmlauncher="false" failonerror="true" if:set="use.exec">
			<arg value="stop"/>
			<env key="JAVA_HOME" value="${jdk.dir.windows}"/>
			<env key="CATALINA_HOME" value="${tomcat.dir.windows}"/>
		</exec>
		<java classname="org.apache.catalina.startup.Bootstrap" fork="true" failonerror="true" if:set="use.java">
			<jvmarg value="-Dcatalina.home=${tomcat.dir}"/>
			<arg value="stop"/>
			<classpath>
				<fileset dir="${tomcat.dir}/bin"><include name="*.jar"/></fileset>
				<fileset dir="${tomcat.dir}/lib"><include name="*.jar"/></fileset>
			</classpath>
		</java>
		<tstamp><format property="stop.begin" pattern="HH:mm:ss"/></tstamp>
		<property name="stop.maxwait" value="300"/>
		<property name="stop.maxwaitunit" value="second"/>
		<echo message="${stop.begin} Wait max ${stop.maxwait} ${stop.maxwaitunit}s for Tomcat to stop" if:set="tomcat.running" unless:set="catalina.bat.not.present"/>
		<waitfor maxwait="${stop.maxwait}" maxwaitunit="${stop.maxwaitunit}" timeoutproperty="stop.failed" if:set="tomcat.running" unless:set="catalina.bat.not.present">
			<not><or><socket server="localhost" port="${tomcat.connector.port}"/><socket server="localhost" port="${tomcat.server.port}"/></or></not>
		</waitfor>
		<fail message="Tomcat (or another process) is still running on port ${tomcat.connector.port} and/or ${tomcat.server.port}. Please stop Tomcat manually or try again" if:set="stop.failed"/>
		<tstamp><format property="stop.end" pattern="HH:mm:ss"/></tstamp>
		<echo message="${stop.end} Done" if:set="tomcat.running" unless:set="catalina.bat.not.present"/>
	</target>

	<target name="restart">
		<antcall target="stop"/>
		<antcall target="start"/>
	</target>

	<target name="rerun">
		<antcall target="stop"/>
		<antcall target="run"/>
	</target>

	<target name="get.java" unless="jdk.zip.available">
		<get src="${jdk.url}" dest="download/${jdk.zip}" verbose="on"/>
	</target>

	<target name="get.ant" unless="ant.zip.available">
		<get src="${ant.url}" dest="download/${ant.zip}" verbose="on"/>
	</target>

	<target name="get.tomcat" unless="tomcat.zip.available">
		<get src="${tomcat.url}" dest="download/${tomcat.zip}" verbose="on"/>
	</target>

	<target name="get.ff" unless="ff.war.available">
		<get src="${ff.url}" dest="download/${ff.war}" verbose="on"/>
	</target>

	<target name="get.jms" unless="jms.jar.available">
		<get src="${jms.url}" dest="download/${jms.jar}" verbose="on"/>
	</target>

	<target name="get.h2" unless="h2.jar.available">
		<get src="${h2.url}" dest="download/${h2.jar}" verbose="on"/>
	</target>

	<target name="get.ojdbc" unless="ojdbc.jar.available">
		<get src="${ojdbc.url}" dest="download/${ojdbc.jar}" verbose="on"/>
	</target>
	
	<target name="get.mssql" unless="mssql.jar.available">
		<get src="${mssql.url}" dest="download/${mssql.jar}" verbose="on"/>
	</target>

	<target name="generate.bat">
		<condition property="ant"><equals arg1="${param1}" arg2="ant"/></condition>
		<echo file="${param1}.bat">@echo off
if not exist "%~dp0download\" (
	mkdir "%~dp0download"
)
if not exist "%~dp0build\tmp\build\" (
	mkdir "%~dp0build\tmp\build"
)
if not exist "%~dp0download\${jdk.zip}" (
	echo Download:
	echo ${jdk.url}
	echo To:
	echo %~dp0download\${jdk.zip}
	echo !!
	echo !! In case of errors you might want to do this manually and/or restart this script
	echo !!
	curl -o "%~dp0download\${jdk.zip}.tmp" -L ${jdk.url}
	if errorlevel 1 (
		goto error
	)
	move "%~dp0download\${jdk.zip}.tmp" "%~dp0download\${jdk.zip}"
)
if not exist "%~dp0${jdk.dir.windows}\" (
	tar xvf "%~dp0download\${jdk.zip}" -C "%~dp0build\tmp\build"
	if errorlevel 1 (
		goto error
	)
	move "%~dp0build\tmp\${jdk.dir.windows}" "%~dp0${jdk.dir.windows}"
)
if not exist "%~dp0download\${ant.zip}" (
	echo Download:
	echo ${ant.url}
	echo To:
	echo %~dp0download\${ant.zip}
	echo In case of errors you might want to do this manually
	curl -o "%~dp0download\${ant.zip}.tmp" -L ${ant.url}
	if errorlevel 1 (
		goto error
	)
	move "%~dp0download\${ant.zip}.tmp" "%~dp0download\${ant.zip}"
)
if not exist "%~dp0${ant.dir.windows}\" (
	tar xvf "%~dp0download\${ant.zip}" -C "%~dp0build\tmp\build"
	if errorlevel 1 (
		goto error
	)
	move "%~dp0build\tmp\${ant.dir.windows}" "%~dp0${ant.dir.windows}"
)
set JAVA_HOME=%~dp0${jdk.dir.windows}
call "%~dp0${ant.dir.windows}\bin\ant"</echo><echo file="${param1}.bat" append="true" unless:set="ant"> -buildfile "%~dp0build.xml"</echo><echo file="${param1}.bat" append="true"> %*</echo><echo file="${param1}.bat" append="true" unless:set="ant"> ${param1}</echo><echo file="${param1}.bat" append="true">
if errorlevel 1 goto error
goto end
:error
set exiterrorlevel=%errorlevel%<!-- exit with errorlevel of previous command -->
set arg0=%0<!-- https://superuser.com/questions/527898/how-to-pause-only-if-executing-in-a-new-window -->
if [%arg0:~2,1%]==[:] if not [%TERM_PROGRAM%] == [vscode] pause
exit /b %exiterrorlevel%
:end</echo>
	</target>

	<target name="splash">
		<condition property="debug.true"><equals arg1="${debug}" arg2="true"/></condition>
		<echo message="system.properties:${system.properties}" if:set="debug.true"/>
		<echo message="" if:set="debug.true"/>
		<echo message="configurations.properties:${configurations.properties}" if:set="debug.true"/>
		<echo message="" if:set="debug.true"/>
		<echo message="projects.dir: ${projects.dir}" if:set="debug.true"/>
		<echo message="project.dir: ${project.dir}" if:set="debug.true"/>
		<echo message="classes.dir: ${classes.dir}" if:set="debug.true"/>
		<echo message="configurations.dir: ${configurations.dir}" if:set="debug.true"/>
		<echo message="java.dir: ${java.dir}" if:set="debug.true"/>
		<echo message="tests.dir: ${tests.dir}" if:set="debug.true"/>
		<echo message="lib.server.dir: ${lib.server.dir}" if:set="debug.true"/>
		<echo message="lib.webapp.dir: ${lib.webapp.dir}" if:set="debug.true"/>
		<echo message="context.xml: ${context.xml}" if:set="debug.true"/>
		<echo message="war.pom.xml.available: ${war.pom.xml.available}" if:set="debug.true"/>
		<echo message="pom.xml.available: ${pom.xml.available}" if:set="debug.true"/>
		<echo message="classloader.type: ${classloader.type}" if:set="debug.true"/>
		<echo message="database.type: ${database.type}" if:set="debug.true"/>
		<echo message="dtap.stage: ${dtap.stage}" if:set="debug.true"/>
		<echo message="" if:set="debug.true"/>
		<echo message="ds.properties.instance.name: ${ds.properties.instance.name}" if:set="debug.true"/>
		<echo message="ds.properties.configurations.names: ${ds.properties.configurations.names}" if:set="debug.true"/>
		<echo message="" if:set="debug.true"/>
		<echo message="instance.name: ${instance.name}" if:set="debug.true"/>
		<echo message="configurations.names: ${configurations.names}" if:set="debug.true"/>
		<echo message="" if:set="debug.true"/>
		<echo message="main.project: ${main.project}" if:set="debug.true"/>
		<echo message="sub.project: ${sub.project}" if:set="debug.true"/>
		<echo message="" if:set="debug.true"/>
		<echo message="    https://github.com/ibissource/frank-runner#frankrunner" if:set="debug.true"/>
		<!-- http://www.network-science.de/ascii/ font standard -->
		<echo message="     _____                _    _ ____"/>
		<echo message="    |  ___| __ __ _ _ __ | | _| |  _ \ _   _ _ __  _ __   ___ _ __"/>
		<echo message="    | |_ | '__/ _` | '_ \| |/ / | |_) | | | | '_ \| '_ \ / _ \ '__|"/>
		<echo message="    |  _|| | | (_| | | | |   &lt;|_|  _ &lt;| |_| | | | | | | |  __/ |"/>
		<echo message="    |_|  |_|  \__,_|_| |_|_|\_(_)_| \_\\__,_|_| |_|_| |_|\___|_|"/>
		<echo message=""/>
		<condition property="splash.name" value="${instance.name}" else="${main.project}_${sub.project}"><not><isset property="sub.project"/></not></condition>
		<condition property="splash.context" value="" else="${context.path}"><equals arg1="${context.path}" arg2="ROOT"/></condition>
		<echo message="    ${splash.name} on http://localhost/${splash.context}"/>
		<echo message="" unless:set="frank.runner.up.to.date"/>
		<echo message="    !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!" unless:set="frank.runner.up.to.date"/>
		<echo message="    !! Your Frank!Runner is out of date, please pull or download new version !!" unless:set="frank.runner.up.to.date"/>
		<echo message="    !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!" unless:set="frank.runner.up.to.date"/>
	</target>

	<scriptdef language="javascript" name="lower">
		<attribute name="from"/> 
		<attribute name="to"/>
		project.setProperty(attributes.get("to"), attributes.get("from").toLowerCase());
	</scriptdef>

</project>
